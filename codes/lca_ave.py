import numpy as np
import scipy
import pysindy as ps
import pandas as pd

def simulate_trial(t, dt, S1, S2, b, k, c, z):
    """
    Simulates a trial for the leaky competiting accumulator (LCA) model.

    Parameters:
        t (array-like): Time array.
        dt (float): Time step.
        S1 (float): Stimulus input amplitude to x.
        S2 (float): Stimulus input amplitude to y.
        b (float): Mutual inhibitory coupling strength between x and y.
        k (float): Rate of decay for x and y.
        c (float): Size of the noise.
        z (float): Decision threshold.

    Returns:
        x (array-like): Trajectory of x the decision varaible.
        y (array-like): Trajectory of y  the decision varaible.
        decision_time (float): Time at which the decision was made.
        choice (int): Indicates whether x (1) or y (0) reached the threshold first or 2 if no decision.
    """
    x = np.zeros_like(t)
    y = np.zeros_like(t)
    
    for p in range(len(x) - 1):
        x[p+1] = x[p]+dt*(-k*x[p]-b*y[p]+S1) + c*np.sqrt(dt)*np.random.randn()
        y[p+1] = y[p]+dt*(-k*y[p]-b*x[p]+S2) + c*np.sqrt(dt)*np.random.randn()
        
        if x[p] >= z or y[p]>=z :
            return x[0:p + 1], y[0:p + 1], p * dt, int(x[p] >= z)
        
    return None, None, p*dt, 2

def simulate_sindy(coefs, dt, c, z, t):
    """
    Simulates a trial using the SINDy model coefficients.

    Parameters:
        coefs (array-like): The coefficients of the SINDy model.
        dt (float): Time step.
        c (float): Size of the noise.
        z (float): Decision threshold.
        t (array-like): Time array.

    Returns:
        sim_x (array-like): Trajectory of x the decision varaible.
        sim_y (array-like): Trajectory of y the decision varaible.
        sindy_trial_decision_time (float): Time at which the decision was made.
        sindy_trial_choice (int): Indicates whether x (1) or y (0) reached the threshold first or 2 if no decision.
    """
    sim_x = np.zeros_like(t)
    sim_y = np.zeros_like(t)

    for h in range(len(sim_x) - 1):
       sim_x[h+1] = sim_x[h]+dt*(coefs[1]*sim_x[h]+coefs[2]*sim_y[h]+coefs[0]) + c*np.sqrt(dt)*np.random.randn()  # poly1
       sim_y[h+1] = sim_y[h]+dt*(coefs[5]*sim_y[h]+coefs[4]*sim_x[h]+coefs[3]) + c*np.sqrt(dt)*np.random.randn()  # poly1
        
        # Uncomment the following lines to use polynomial order 0 or 2
        # sim_x[h+1] = sim_x[h]+(dt*coefs[0]) + c*np.sqrt(dt)*np.random.randn()  # poly0
        # sim_y[h+1] = sim_y[h]+(dt*coefs[1]) + c*np.sqrt(dt)*np.random.randn()  # poly0        
        # sim_x[h+1] = sim_x[h]+dt*(coef_0*sim_x[h]+coef_1*sim_y[h]+coef_2+(coef_3*sim_x[h]**2)+(coef_4*sim_x[h]*sim_y[h])+(coef_5*sim_y[h]**2)) + c*np.sqrt(dt)*np.random.randn()  # poly2
        # sim_y[h+1] = sim_y[h]+dt*(coef_6*sim_y[h]+coef_7*sim_x[h]+coef_8+(coef_9*sim_x[h]**2)+(coef_10*sim_x[h]*sim_y[h])+(coef_11*sim_y[h]**2)) + c*np.sqrt(dt)*np.random.randn()  # poly2

       if sim_x[h] >= z or sim_y[h] >= z:
            return sim_x[:h + 1], sim_y[:h + 1], h * dt, int(sim_x[h] >= z)
    
    return None, None, h*dt, 2

def sessionLCA(trials, signal, coefs, seedings):
    """
    Runs multiple trials of the LCA model and fits the SINDy model to the simulated data.

    Parameters:
        trials (int): Number of trials to be run.
        signal (float): Strength of the drift rate.
        coefs (array-like): Coefficients for the SINDy model.
        seedings (int): Seed for random number generation to ensure reproducibility.

    Returns:
        coef_mat (list of array-like): List of coefficients for each SINDy model fit.
        choice_trials (list of int): Choices made in each LCA trial.
        sindy_choice (list of int): Choices made in each SINDy trial.
        decision_time (list of float): Decision times for each LCA trial.
        sindy_dt (list of float): Decision times for each SINDy trial.
        model_data (list of list of array-like): Trajectories of x and y for sampled LCA trials.
        sindy_data (list of list of array-like): Trajectories of x and y for sampled SINDy trials.
    """
    # Parameter initialization
    S1 = 1.85 + signal  # Stimulus input amplitude to y1
    S2 = 1.85  # Stimulus input amplitude to y2 
    b = 4  # Mutual inhibitory coupling strength between the y's
    k = 3  # Rate of decay of the y's
    z = 1  # Decision threshold
    c = 0.11  # Size of the noise
    dt = 0.01  # Timestep
    Model_total = trials
    T_Total = 10000  # Total time
    sample = 10

    # Data storage initialization
    coef_mat = []
    choice_trials, decision_time, model_data = [], [], []
    sindy_choice, sindy_dt, sindy_data = [], [], []

    # Loop through trials
    for model in range(trials):
        t = np.arange(0, T_Total, dt)
        np.random.seed(model + 20000+ 7500+seedings)

        # Simulate trial
        x, y, trial_decision_time, trial_choice = simulate_trial(t, dt, S1, S2, b, k, c, z)
        if trial_decision_time is not None:
            decision_time.append(trial_decision_time)
            choice_trials.append(trial_choice)
            if model % sample == 0:
                model_data.append([x, y])
        coefs=coefs.reshape(-1)
        sim_x, sim_y, sindy_trial_decision_time, sindy_trial_choice = simulate_sindy(coefs, dt, c, z, t)
        if sindy_trial_decision_time is not None:
            sindy_choice.append(sindy_trial_choice)
            sindy_dt.append(sindy_trial_decision_time)
            if model % sample == 0:
                sindy_data.append([sim_x, sim_y])

    return coef_mat, choice_trials, sindy_choice, decision_time, sindy_dt, model_data, sindy_data
    
##trial average dataset##
#WARNING this takes time to run#
# trials = 10000
# coefs=[[1.558094785594208, -2.4074715037375785, -3.3517739672488767, 1.563098283332923, -3.358432341343831, -2.4117567959797177], [1.5927307645890119, -2.4209181656156207, -3.351114388043913, 1.5703180879530714, -3.391387760358339, -2.42887909906861], [1.6319285706197149, -2.4383505032711668, -3.3681098629110027, 1.581770249900114, -3.4349681893039254, -2.445715388923745], [1.6787550125294646, -2.471213493148754, -3.3978427699751665, 1.6005154899628264, -3.490821909602007, -2.4762697848284843], [1.726727074574477, -2.5027702996463628, -3.432210905238961, 1.6206539252716547, -3.545747549572923, -2.504595573867399], [1.7777230842295169, -2.5401793832320085, -3.4736141629551867, 1.6439190817158666, -3.600973563509997, -2.5419410285652804], [1.8296121834176042, -2.5783949980031364, -3.521328879827752, 1.6662149605518348, -3.6534145433890304, -2.5734588320510126], [1.8797186778386028, -2.6164153281803455, -3.559479479645531, 1.6878106281730794, -3.7006040112933727, -2.607134365668813], [1.9282876678897056, -2.6499899018396316, -3.602278001149129, 1.7079423801269502, -3.742000906550413, -2.6362679024914644], [1.9750107698213137, -2.68043792722707, -3.641874239886962, 1.7246779364253846, -3.774877057144695, -2.6638529709649372], [2.0202128342315584, -2.709800366016542, -3.6732304923407058, 1.7388041302418824, -3.8013513856674908, -2.684603186828666], [2.063924459208365, -2.7353192361633196, -3.7046204726379823, 1.7514857989355639, -3.824570738913018, -2.699842009465253], [2.1053657401775614, -2.757767862469901, -3.7265359881190103, 1.7619252345880563, -3.8436527830735367, -2.713689468066204], [2.146003427371562, -2.7777365095555835, -3.7502336180732025, 1.7725710369556, -3.8623900772715984, -2.732035775468667], [2.186232413933752, -2.797092782794148, -3.7768201637622383, 1.7814694302386154, -3.877872560078426, -2.745375349260747], [2.225322963954735, -2.8143833424148696, -3.7958616352653807, 1.7897679692310016, -3.8919113433710693, -2.7583262314643604], [2.263417705865818, -2.829850173430391, -3.811099768772993, 1.797991863094335, -3.9055931956177248, -2.773083241357249], [2.300874476822852, -2.8435594681050493, -3.827756787451632, 1.8050221219491762, -3.9178418051259176, -2.782767451923029], [2.3379797569896406, -2.8574318507915613, -3.842390179574833, 1.8107618177918414, -3.9283464649312214, -2.7858816526585297], [2.3748690211883114, -2.870058394626608, -3.8583652882600297, 1.8168648510110994, -3.938125299784949, -2.7983217020610884], [2.4109729421595896, -2.880787630372757, -3.8750412523048676, 1.8224869962387857, -3.947685631153181, -2.8048607520718813], [2.4469011575770705, -2.8918893622167574, -3.888463261680303, 1.8280409281571353, -3.9567541321570023, -2.8126232392761334], [2.4823734999080136, -2.9015686619684664, -3.9033575372965816, 1.8328803416779673, -3.9642623050019234, -2.819873684714547], [2.51719821613007, -2.9102748428429783, -3.911965503626087, 1.837947724995545, -3.9724223538941295, -2.8281192784781553], [2.5525223932898973, -2.9197828431044703, -3.9245499540184223, 1.842885988612609, -3.980686488937937, -2.835487908751095], [2.5868376139414107, -2.927145492099568, -3.9361406954777878, 1.8476146411380687, -3.987968910096379, -2.845659305193411], [2.621056190773089, -2.9349498817345223, -3.9451150480628274, 1.8520947341223077, -3.9956791896537585, -2.8518748522188875], [2.6555032333411597, -2.942509740273176, -3.9582860354765086, 1.8561778036714176, -4.002220510652255, -2.8581444435809877], [2.6891590962856164, -2.949222960437672, -3.9673391102438256, 1.8589615368936703, -4.007444399794014, -2.850387755534463], [2.7231649665738704, -2.955658078854397, -3.9803351974505663, 1.8634867501821128, -4.014569012658851, -2.8609435942457795], [2.755751711027345, -2.960488510534971, -3.982022810613866, 1.8675398178006621, -4.0207542285151305, -2.8672939022860473], [2.788843382615946, -2.965696369402972, -3.988347554045654, 1.870926987857185, -4.02590479150539, -2.8708383953011465], [2.8220307288808857, -2.9710543656875665, -3.998578040295241, 1.8742839269501315, -4.0309641575324315, -2.877611202688982], [2.8558212017898024, -2.976753584906949, -4.013440787745316, 1.8777259873774652, -4.035563951489924, -2.8841945692749293], [2.888947867137125, -2.9820481255565716, -4.020103484607915, 1.8812713324870372, -4.041177807090964, -2.8902385110817086], [2.9224384670018004, -2.9870145932488836, -4.032898423266119, 1.8849411181733313, -4.046850164716699, -2.898867064476895], [2.9558152502307165, -2.9923389538976886, -4.0466174230674765, 1.8879885631812017, -4.0514579004487405, -2.9021780506191504], [2.988956322012197, -2.9965217060373233, -4.057279075119627, 1.8905179201652946, -4.055520127484073, -2.9027459866820076], [3.0223249291871803, -3.000961402338743, -4.071505805390516, 1.8930841112525456, -4.059406794970027, -2.904785525950084], [3.054868047903242, -3.0050658501387084, -4.078869739051577, 1.8962476281048155, -4.063889924661084, -2.9106502961495906], [3.0866159430966458, -3.007690321238341, -4.080737465672309, 1.899009828071818, -4.068114362108182, -2.916525882410967]]
# signal = np.arange(0.000, 1.21, 0.03)
# nt_var = [(trials, signal[i],coefs[i]) for i in len(signal)]
# data=[]
# for i in range(len(nt_var)):
#     data.append(sessionDDM(nt_var[i]))



    # coefs=[[ 2.13645618, -5.56316073, -6.26183988,  3.95145086,  7.24710562,
    #      4.12553037,  2.13777215, -6.23679425, -5.53417951,  4.08985272,
    #      7.14177884,  3.91427966],
    #    [ 2.16398223, -5.91314449, -5.85666328,  4.52653464,  7.14738708,
    #      3.54350076,  2.13827196, -6.53775064, -5.13968509,  4.45031186,
    #      6.88704101,  3.24631857],
    #    [ 2.18883789, -6.18876042, -5.45414971,  4.98323642,  6.93400813,
    #      2.96358514,  2.13634421, -6.83771001, -4.70793935,  4.82056875,
    #      6.59010012,  2.56566429],
    #    [ 2.21069222, -6.3748917 , -5.06887033,  5.30362546,  6.6223491 ,
    #      2.40537314,  2.13118221, -7.11411736, -4.2371578 ,  5.16565304,
    #      6.20845181,  1.81551472],
    #    [ 2.23010288, -6.50132722, -4.69785029,  5.51684715,  6.2353142 ,
    #      1.89739641,  2.12207161, -7.33395288, -3.71054573,  5.41837855,
    #      5.66753154,  0.99904594],
    #    [ 2.2484869 , -6.53658142, -4.37190724,  5.57874839,  5.77769248,
    #      1.46613196,  2.1128847 , -7.44245938, -3.32962072,  5.50724885,
    #      5.21452517,  0.48461993],
    #    [ 2.26674618, -6.56492461, -4.0541927 ,  5.6324264 ,  5.33388163,
    #      1.05092969,  2.10078921, -7.51456414, -2.91879519,  5.55586885,
    #      4.66149283, -0.06968593],
    #    [ 2.28653421, -6.57159439, -3.77606586,  5.64180811,  4.9164038 ,
    #      0.70363614,  2.08914256, -7.51603677, -2.59298187,  5.50747347,
    #      4.15466616, -0.50672693],
    #    [ 2.30634172, -6.54246557, -3.53100067,  5.59156289,  4.49490263,
    #      0.40368571,  2.0784178 , -7.48544917, -2.32228539,  5.41213777,
    #      3.6889144 , -0.85954795],
    #    [ 2.32721272, -6.50383039, -3.3174794 ,  5.52358536,  4.11101874,
    #      0.16118746,  2.06813045, -7.45424591, -2.07580824,  5.32840686,
    #      3.26092732, -1.17615391],
    #    [ 2.34953708, -6.44687063, -3.15348693,  5.4105261 ,  3.7845369 ,
    #      0.03998321,  2.06014174, -7.42040603, -1.86745931,  5.24449619,
    #      2.90123679, -1.38353165],
    #    [ 2.37283515, -6.42421505, -2.97372501,  5.35596316,  3.47166092,
    #     -0.10689829,  2.05168577, -7.37865505, -1.65428772,  5.15501531,
    #      2.52213229, -1.63120959],
    #    [ 2.39779135, -6.36594484, -2.88843147,  5.2346471 ,  3.2668639 ,
    #     -0.0984024 ,  2.04426913, -7.35749817, -1.43990481,  5.10582611,
    #      2.17912838, -1.88869371],
    #    [ 2.42144359, -6.3502597 , -2.70752036,  5.19747558,  2.98332558,
    #     -0.29680412,  2.03805542, -7.31410961, -1.2739644 ,  5.01590215,
    #      1.87829685, -2.02516438],
    #    [ 2.44652381, -6.30887912, -2.60006368,  5.10904352,  2.77754488,
    #     -0.3294514 ,  2.03208653, -7.27676363, -1.11500162,  4.94225667,
    #      1.61562934, -2.17821112],
    #    [ 2.47330885, -6.27128807, -2.51807206,  5.02203913,  2.61802837,
    #     -0.30975168,  2.02685484, -7.24081369, -0.97877115,  4.86782242,
    #      1.37247564, -2.32658039],
    #    [ 2.49882802, -6.2483993 , -2.39690052,  4.96696779,  2.41858136,
    #     -0.3787899 ,  2.02224515, -7.19946734, -0.84785859,  4.78801846,
    #      1.14242545, -2.48367902],
    #    [ 2.52597761, -6.22602747, -2.31255882,  4.90893971,  2.2914732 ,
    #     -0.37344736,  2.01897762, -7.20362562, -0.69431505,  4.77198715,
    #      0.92994846, -2.5733059 ],
    #    [ 2.55290613, -6.22169134, -2.1987845 ,  4.88221794,  2.1360314 ,
    #     -0.4018175 ,  2.01547088, -7.16130517, -0.59430199,  4.68630054,
    #      0.73609221, -2.66442951],
    #    [ 2.58138869, -6.18193368, -2.1832175 ,  4.79428691,  2.08414545,
    #     -0.23715241,  2.01210919, -7.12716283, -0.47908695,  4.61459935,
    #      0.54729072, -2.76643925],
    #    [ 2.60779696, -6.16117182, -2.07176194,  4.7466387 ,  1.91788419,
    #     -0.32248171,  2.01063219, -7.12923515, -0.37442376,  4.59725963,
    #      0.4281366 , -2.80489497],
    #    [ 2.63504464, -6.17867245, -1.92562493,  4.75398124,  1.74875938,
    #     -0.3746146 ,  2.00938895, -7.09700297, -0.31274243,  4.52466678,
    #      0.32568532, -2.77381919],
    #    [ 2.66418874, -6.1603025 , -1.87971605,  4.70084799,  1.6787008 ,
    #     -0.30006595,  2.00646083, -7.08285838, -0.18153435,  4.48744287,
    #      0.13043513, -2.94535971],
    #    [ 2.69258328, -6.14652523, -1.79993019,  4.6581724 ,  1.56090827,
    #     -0.27231826,  2.00529561, -7.07976219, -0.09781059,  4.46130793,
    #      0.02581689, -2.95926867],
    #    [ 2.71997587, -6.13990987, -1.70071478,  4.63324556,  1.44753303,
    #     -0.31887211,  2.00338625, -7.06742629,  0.01153349,  4.42591475,
    #     -0.11162014, -3.05819775],
    #    [ 2.74954368, -6.14230807, -1.63752235,  4.61253796,  1.38147086,
    #     -0.22008327,  2.00247662, -7.04336135,  0.07902151,  4.36791938,
    #     -0.21924868, -3.07458045],
    #    [ 2.77763541, -6.12632074, -1.58522402,  4.56768946,  1.33224222,
    #     -0.1207753 ,  2.00121479, -7.00314158,  0.12635337,  4.28651074,
    #     -0.3130243 , -3.05826996],
    #    [ 2.80652374, -6.11610733, -1.51756941,  4.53369125,  1.24493884,
    #     -0.09396322,  2.00051002, -6.97890561,  0.16034961,  4.22815537,
    #     -0.37062474, -2.96899124],
    #    [ 2.83404372, -6.10734741, -1.41244685,  4.50635415,  1.11281246,
    #     -0.15503149,  1.99866328, -6.96821296,  0.26418498,  4.19920588,
    #     -0.5014006 , -3.10618888],
    #    [ 2.86387365, -6.10103275, -1.37243478,  4.47255577,  1.08125268,
    #      0.0370957 ,  1.99873299, -6.95740506,  0.30839632,  4.16307198,
    #     -0.53877959, -3.05471545],
    #    [ 2.89330738, -6.11427066, -1.25720765,  4.47325204,  0.96634069,
    #      0.02371503,  1.99844632, -6.93894244,  0.35103736,  4.11825844,
    #     -0.58856649, -3.00852367],
    #    [ 2.92184954, -6.08905064, -1.19680074,  4.42288161,  0.88504849,
    #      0.0177548 ,  1.99770937, -6.9271375 ,  0.44367311,  4.08768767,
    #     -0.71098573, -3.17701538],
    #    [ 2.95171892, -6.09717938, -1.15282478,  4.41444355,  0.88366344,
    #      0.25104577,  1.99756449, -6.92402753,  0.49802153,  4.06474695,
    #     -0.76088886, -3.1039253 ],
    #    [ 2.98034211, -6.07897224, -1.08618599,  4.3705891 ,  0.77693238,
    #      0.23957793,  1.99687551, -6.90924776,  0.55841902,  4.02415487,
    #     -0.85105229, -3.09680323],
    #    [ 3.00875779, -6.07920341, -0.99482646,  4.35457532,  0.67233406,
    #      0.18206007,  1.9958605 , -6.9067452 ,  0.66155953,  4.00967962,
    #     -0.97277821, -3.26273637],
    #    [ 3.03767897, -6.0720531 , -0.95337995,  4.32701263,  0.63388638,
    #      0.31650374,  1.99674663, -6.88831898,  0.6690579 ,  3.96133758,
    #     -0.95295494, -3.11027957],
    #    [ 3.06777257, -6.07773693, -0.91059551,  4.31895907,  0.64652847,
    #      0.50296432,  1.99628086, -6.86382592,  0.71717716,  3.91375624,
    #     -1.00981651, -3.158968  ],
    #    [ 3.09733139, -6.0821395 , -0.84391247,  4.30864821,  0.59318987,
    #      0.5229095 ,  1.99613347, -6.84862279,  0.77369568,  3.87837501,
    #     -1.06540945, -3.17261349],
    #    [ 3.12626088, -6.08126363, -0.77857436,  4.29246079,  0.54959316,
    #      0.6736762 ,  1.99573203, -6.84959021,  0.85465685,  3.86733846,
    #     -1.12329991, -3.22995778],
    #    [ 3.15798587, -6.08704496, -0.77482098,  4.27811671,  0.58973467,
    #      0.90917916,  1.99526468, -6.83274791,  0.8923647 ,  3.82750267,
    #     -1.16275883, -3.16272751],
    #    [ 3.18801964, -6.09067859, -0.71838918,  4.26593912,  0.55482779,
    #      1.01080016,  1.99590079, -6.82206211,  0.92749516,  3.79474079,
    #     -1.19940274, -3.12814286]]poly2
#    [[ 0.09432577,  0.09453273],
#       [ 0.16089002,  0.03202127],
#       [ 0.22629206, -0.02539927],
#       [ 0.2889155 , -0.07594451],
#       [ 0.34567168, -0.11754015],
#       [ 0.39508923, -0.14995836],
#       [ 0.43985902, -0.176271  ],
#       [ 0.47904849, -0.1965512 ],
#       [ 0.51440061, -0.21283141],
#       [ 0.54717925, -0.22625121],
#       [ 0.57796999, -0.2377882 ],
#       [ 0.60774913, -0.2480559 ],
#       [ 0.63608289, -0.25750787],
#       [ 0.66384009, -0.26627489],
#       [ 0.69120346, -0.27448949],
#       [ 0.71823462, -0.28229139],
#       [ 0.74502298, -0.28984165],
#       [ 0.77138377, -0.29657838],
#       [ 0.79779255, -0.30380866],
#       [ 0.82410249, -0.31057797],
#       [ 0.84998349, -0.31702392],
#       [ 0.87658317, -0.32304035],
#       [ 0.90266435, -0.32915683],
#       [ 0.92881757, -0.33483154],
#       [ 0.95469799, -0.34044793],
#       [ 0.98112243, -0.34569037],
#       [ 1.00716787, -0.35106646],
#       [ 1.03318374, -0.3559123 ],
#       [ 1.05924199, -0.36090525],
#       [ 1.08575995, -0.365215  ],
#       [ 1.11199849, -0.36983658],
#       [ 1.137843  , -0.37428498],
#       [ 1.16478946, -0.37769097],
#       [ 1.19104934, -0.38144247],
#       [ 1.21718803, -0.38549435],
#       [ 1.24407549, -0.38905592],
#       [ 1.27069579, -0.39270049],
#       [ 1.29715412, -0.3963695 ],
#       [ 1.32434484, -0.39943951],
#       [ 1.35122312, -0.40234594],
#       [ 1.37826286, -0.40532944]]#poly0
#     data.append(sessionDDM(nt_var[i]))
